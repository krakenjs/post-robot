/**
 * Flowtype definitions for global
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import type {
  CrossDomainWindowType,
  SameDomainWindowType,
} from "cross-domain-utils";
declare export function getGlobalKey(): string;
declare export function getGlobal(win?: SameDomainWindowType): {
  [key: string]: any,
  ...
};
declare export function deleteGlobal(): void;
declare type ObjectGetter = () => { [key: string]: any, ... };
declare type GetOrSet<T> = {
  ...(arg0: string, arg1: () => T) => T,
  ...(arg0: string, arg1: () => void) => void,
};
declare type GlobalStore<T> = {
  get: {
    ...(arg0: string, arg1: T) => T,
    ...(arg0: string, arg1: void) => T | void,
  },
  set: (arg0: string, arg1: T) => T,
  has: (arg0: string) => boolean,
  del: (arg0: string) => void,
  getOrSet: GetOrSet<T>,
  reset: () => void,
  keys: () => $ReadOnlyArray<string>,
  ...
};
declare export function globalStore<T: mixed>(
  key?: string,
  defStore?: ObjectGetter
): GlobalStore<T>;
declare export class WildCard {}
declare export function getWildcard(): WildCard;
declare type WindowStore<T> = {
  get: {
    ...(arg0: CrossDomainWindowType | WildCard, arg1: T) => T,
    ...(arg0: CrossDomainWindowType | WildCard, arg1: void) => T | void,
  },
  set: (arg0: CrossDomainWindowType | WildCard, arg1: T) => T,
  has: (arg0: CrossDomainWindowType | WildCard) => boolean,
  del: (arg0: CrossDomainWindowType | WildCard) => void,
  getOrSet: (arg0: CrossDomainWindowType | WildCard, arg1: () => T) => T,
  ...
};
declare export function windowStore<T>(
  key?: string,
  defStore?: ObjectGetter
): WindowStore<T>;
declare export {};
