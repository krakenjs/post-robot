/**
 * Flowtype definitions for types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import type { ZalgoPromise } from "zalgo-promise";
import type { CrossDomainWindowType, DomainMatcher } from "cross-domain-utils";
declare export var TYPES: true;
export type CancelableType = {
  cancel: () => void,
  ...
};
export type ErrorHandlerType = (err: mixed) => void;
export type HandlerType = (arg0: {
  source: CrossDomainWindowType,
  origin: string,
  data: any,
  ...
}) => void | any | ZalgoPromise<any>;
export type ServerOptionsType = {
  handler?: HandlerType | null | void,
  errorHandler?: ErrorHandlerType | null | void,
  window?: CrossDomainWindowType,
  name?: string | null | void,
  domain?: DomainMatcher | null | void,
  once?: boolean | null | void,
  errorOnClose?: boolean | null | void,
  ...
};
export type OnType = (
  name: string,
  options: ServerOptionsType | HandlerType,
  handler?: HandlerType | null | void
) => CancelableType;
declare type RegularRequestOptionsType = {
  domain?: DomainMatcher | null | void,
  fireAndForget?: false,
  timeout?: number | null | void,
  ...
};
declare type FireAndForgetRequestOptionsType = {
  domain?: DomainMatcher | null | void,
  fireAndForget: true,
  timeout?: number | null | void,
  ...
};
export type RequestOptionsType =
  | RegularRequestOptionsType
  | FireAndForgetRequestOptionsType;
export type ResponseMessageEvent = {
  source: CrossDomainWindowType,
  origin: string,
  data: { [key: string]: any, ... },
  ...
};
declare type RegularSendType = (
  win: CrossDomainWindowType,
  name: string,
  data?: { [key: string]: any, ... } | null | void,
  options?: RegularRequestOptionsType
) => ZalgoPromise<ResponseMessageEvent>;
declare type FireAndForgetSendType = (
  win: CrossDomainWindowType,
  name: string,
  data?: { [key: string]: any, ... } | null | void,
  options?: FireAndForgetRequestOptionsType
) => ZalgoPromise<void>;
export type SendType = { ...RegularSendType, ...FireAndForgetSendType };
export type MessageEvent = {
  source: CrossDomainWindowType,
  origin: string,
  data: string,
  ...
};
export type CrossDomainFunctionType<A, R> = {
  (...args: Array<A>): ZalgoPromise<R>,
  fireAndForget: (...args: Array<A>) => ZalgoPromise<void>,
  __id__?: string,
  __name__?: string,
  ...
};
export type ReceiveMessageType = (
  arg0: MessageEvent,
  arg1: {
    on: OnType,
    send: SendType,
    ...
  }
) => void;
declare export {};
