/**
 * Flowtype definitions for window
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import { $Values } from "utility-types";
import type { CrossDomainWindowType, DomainMatcher } from "cross-domain-utils";
import { WINDOW_TYPE } from "cross-domain-utils";
import { ZalgoPromise } from "zalgo-promise";
import type { CustomSerializedType } from "universal-serialize";
import { SERIALIZATION_TYPE, METHOD } from "../conf";
import type { SendType } from "../types";
declare type SetLocationOptions = {
  method?: $Values<typeof METHOD>,
  body?: { [key: string]: string | boolean, ... },
  ...
};
declare type SerializedWindowType = {
  id: string,
  getType: () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,
  close: () => ZalgoPromise<void>,
  focus: () => ZalgoPromise<void>,
  isClosed: () => ZalgoPromise<boolean>,
  setLocation: (url: string, opts?: SetLocationOptions) => ZalgoPromise<void>,
  getName: () => ZalgoPromise<string | null | void>,
  setName: (arg0: string) => ZalgoPromise<void>,
  getInstanceID: () => ZalgoPromise<string>,
  ...
};
declare export class ProxyWindow {
  id?: string;
  isProxyWindow: true;
  serializedWindow: SerializedWindowType;
  actualWindow: CrossDomainWindowType | null | void;
  actualWindowPromise: ZalgoPromise<CrossDomainWindowType>;
  send?: SendType;
  name?: string;
  constructor(x: {
    win?: CrossDomainWindowType,
    serializedWindow?: SerializedWindowType,
    send: SendType,
    ...
  }): this;
  getID(): string;
  getType(): ZalgoPromise<$Values<typeof WINDOW_TYPE>>;
  isPopup(): ZalgoPromise<boolean>;
  setLocation(
    href: string,
    opts?: SetLocationOptions
  ): ZalgoPromise<ProxyWindow>;
  getName(): ZalgoPromise<string | null | void>;
  setName(name: string): ZalgoPromise<ProxyWindow>;
  close(): ZalgoPromise<ProxyWindow>;
  focus(): ZalgoPromise<ProxyWindow>;
  isClosed(): ZalgoPromise<boolean>;
  getWindow(): CrossDomainWindowType | null | void;
  setWindow(
    win: CrossDomainWindowType,
    x: {
      send: SendType,
      ...
    }
  ): void;
  awaitWindow(): ZalgoPromise<CrossDomainWindowType>;
  matchWindow(
    win: CrossDomainWindowType,
    x: {
      send: SendType,
      ...
    }
  ): ZalgoPromise<boolean>;
  unwrap(): CrossDomainWindowType | ProxyWindow;
  getInstanceID(): ZalgoPromise<string>;
  shouldClean(): boolean;
  serialize(): SerializedWindowType;
  static unwrap(
    win: CrossDomainWindowType | ProxyWindow
  ): CrossDomainWindowType | ProxyWindow;
  static serialize(
    win: CrossDomainWindowType | ProxyWindow,
    x: {
      send: SendType,
      ...
    }
  ): SerializedWindowType;
  static deserialize(
    serializedWindow: SerializedWindowType,
    x: {
      send: SendType,
      ...
    }
  ): ProxyWindow;
  static isProxyWindow(obj: CrossDomainWindowType | ProxyWindow): boolean;
  static toProxyWindow(
    win: CrossDomainWindowType | ProxyWindow,
    x: {
      send: SendType,
      ...
    }
  ): ProxyWindow;
}
export type SerializedWindow = CustomSerializedType<
  typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW,
  SerializedWindowType
>;
declare export function serializeWindow(
  destination: CrossDomainWindowType | ProxyWindow,
  domain: DomainMatcher,
  win: CrossDomainWindowType,
  x: {
    send: SendType,
    ...
  }
): SerializedWindow;
declare export function deserializeWindow(
  source: CrossDomainWindowType | ProxyWindow,
  origin: string,
  win: SerializedWindowType,
  x: {
    send: SendType,
    ...
  }
): ProxyWindow;
declare export {};
