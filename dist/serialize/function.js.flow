/**
 * Flowtype definitions for function
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import type { CrossDomainWindowType, DomainMatcher } from "cross-domain-utils";
import { ZalgoPromise } from "zalgo-promise";
import type { CustomSerializedType } from "universal-serialize";
import { SERIALIZATION_TYPE } from "../conf";
import type { OnType, SendType } from "../types";
import { ProxyWindow } from "./window";
export type SerializedFunction = CustomSerializedType<
  typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION,
  {
    id: string,
    name: string,
    ...
  }
>;
declare type SerializableFunction<T> = {
  (): ZalgoPromise<T> | T,
  __id__?: string,
  __name__?: string,
  ...
};
declare export function serializeFunction<T>(
  destination: CrossDomainWindowType | ProxyWindow,
  domain: DomainMatcher,
  val: SerializableFunction<T>,
  key: string,
  x: {
    on: OnType,
    send: SendType,
    ...
  }
): SerializedFunction;
declare export function deserializeFunction<T>(
  source: CrossDomainWindowType | ProxyWindow,
  origin: string,
  x: {
    id: string,
    name: string,
    ...
  },
  x: {
    send: SendType,
    ...
  }
): (...args: $ReadOnlyArray<mixed>) => ZalgoPromise<T>;
declare export {};
