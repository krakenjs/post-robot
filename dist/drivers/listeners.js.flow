/**
 * Flowtype definitions for listeners
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import type { ZalgoPromise } from "zalgo-promise";
import type { CrossDomainWindowType, DomainMatcher } from "cross-domain-utils";
import type { WildCard } from "../global";
declare export function resetListeners(): void;
export type RequestListenerType = {
  handler: (arg0: {
    source: CrossDomainWindowType,
    origin: string,
    data: mixed,
    ...
  }) => mixed | ZalgoPromise<mixed>,
  handleError: (err: mixed) => void,
  window: CrossDomainWindowType | null | void,
  name: string,
  domain: DomainMatcher,
  ...
};
export type ResponseListenerType = {
  name: string,
  win: CrossDomainWindowType,
  domain: DomainMatcher,
  promise: ZalgoPromise<any>,
  ack?: boolean | null | void,
  cancelled?: boolean | null | void,
  ...
};
declare export function addResponseListener(
  hash: string,
  listener: ResponseListenerType
): void;
declare export function getResponseListener(
  hash: string
): ResponseListenerType | null | void;
declare export function deleteResponseListener(hash: string): void;
declare export function cancelResponseListeners(): void;
declare export function markResponseListenerErrored(hash: string): void;
declare export function isResponseListenerErrored(hash: string): boolean;
declare export function getRequestListener(x: {
  name: string,
  win: (CrossDomainWindowType | WildCard) | null | void,
  domain: (string | RegExp) | null | void,
  ...
}): RequestListenerType | null | void;
declare export function addRequestListener(
  x: {
    name: string,
    win: (CrossDomainWindowType | WildCard) | null | void,
    domain: DomainMatcher | null | void,
    ...
  },
  listener: RequestListenerType
): {
  cancel: () => void,
  ...
};
